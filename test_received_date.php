<?php
// test_received_date.php
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠

session_start();

// Simple auth bypass for testing
if (!isset($_SESSION['user_login'])) {
    $_SESSION['user_login'] = 'test_user';
    $_SESSION['user_role'] = 'sales';
}

echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>üìÖ Test Received Date Column</title>";
echo "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet'>";
echo "<style>body{font-family:Arial,sans-serif;padding:20px;} .test-section{margin:20px 0;padding:15px;border:2px solid #ddd;border-radius:8px;}</style>";
echo "</head><body>";

echo "<div class='container'>";
echo "<h1>üìÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠</h1>";

// Test 1: Check Database Columns
echo "<div class='test-section'>";
echo "<h2>üîç Test 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>";

try {
    require_once 'config/database.php';
    $pdo = new PDO($dsn, $username, $password, $options);
    
    echo "<h4>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers:</h4>";
    
    $sql = "SELECT 
        CustomerCode, CustomerName, CustomerStatus,
        AssignDate, CreatedDate, LastContactDate,
        CASE 
            WHEN AssignDate IS NOT NULL THEN '‡∏°‡∏µ AssignDate'
            WHEN CreatedDate IS NOT NULL THEN '‡∏°‡∏µ CreatedDate ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
            ELSE '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'
        END as date_status
        FROM customers 
        ORDER BY 
            CASE 
                WHEN AssignDate IS NOT NULL THEN 1
                WHEN CreatedDate IS NOT NULL THEN 2
                ELSE 3
            END
        LIMIT 10";
    
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $customers = $stmt->fetchAll();
    
    if ($customers) {
        echo "<table class='table table-striped'>";
        echo "<thead>";
        echo "<tr><th>‡∏£‡∏´‡∏±‡∏™</th><th>‡∏ä‡∏∑‡πà‡∏≠</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>AssignDate</th><th>CreatedDate</th><th>LastContactDate</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th></tr>";
        echo "</thead><tbody>";
        
        foreach ($customers as $customer) {
            echo "<tr>";
            echo "<td>" . htmlspecialchars($customer['CustomerCode']) . "</td>";
            echo "<td>" . htmlspecialchars($customer['CustomerName']) . "</td>";
            echo "<td>" . htmlspecialchars($customer['CustomerStatus']) . "</td>";
            echo "<td>" . ($customer['AssignDate'] ? date('d/m/Y', strtotime($customer['AssignDate'])) : '<span class="text-muted">NULL</span>') . "</td>";
            echo "<td>" . ($customer['CreatedDate'] ? date('d/m/Y', strtotime($customer['CreatedDate'])) : '<span class="text-muted">NULL</span>') . "</td>";
            echo "<td>" . ($customer['LastContactDate'] ? date('d/m/Y', strtotime($customer['LastContactDate'])) : '<span class="text-muted">NULL</span>') . "</td>";
            echo "<td><strong>" . htmlspecialchars($customer['date_status']) . "</strong></td>";
            echo "</tr>";
        }
        
        echo "</tbody></table>";
        
        // Summary
        $sqlSummary = "SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN AssignDate IS NOT NULL THEN 1 ELSE 0 END) as has_assign_date,
            SUM(CASE WHEN CreatedDate IS NOT NULL THEN 1 ELSE 0 END) as has_created_date,
            SUM(CASE WHEN AssignDate IS NULL AND CreatedDate IS NULL THEN 1 ELSE 0 END) as no_dates
            FROM customers";
        
        $stmt = $pdo->prepare($sqlSummary);
        $stmt->execute();
        $summary = $stmt->fetch();
        
        echo "<div class='alert alert-info'>";
        echo "<h5>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</h5>";
        echo "<ul>";
        echo "<li><strong>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> " . $summary['total'] . " ‡∏Ñ‡∏ô</li>";
        echo "<li><strong>‡∏°‡∏µ AssignDate:</strong> " . $summary['has_assign_date'] . " ‡∏Ñ‡∏ô (" . round(($summary['has_assign_date']/$summary['total'])*100, 1) . "%)</li>";
        echo "<li><strong>‡∏°‡∏µ CreatedDate:</strong> " . $summary['has_created_date'] . " ‡∏Ñ‡∏ô (" . round(($summary['has_created_date']/$summary['total'])*100, 1) . "%)</li>";
        echo "<li><strong>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> " . $summary['no_dates'] . " ‡∏Ñ‡∏ô</li>";
        echo "</ul>";
        echo "</div>";
        
    } else {
        echo "<div class='alert alert-warning'>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</div>";
    }
    
} catch (Exception $e) {
    echo "<div class='alert alert-danger'>‚ùå Database error: " . htmlspecialchars($e->getMessage()) . "</div>";
}

echo "</div>";

// Test 2: API Response Test
echo "<div class='test-section'>";
echo "<h2>üîó Test 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Response</h2>";

try {
    $_GET['include_customers'] = 'true';
    $_GET['limit'] = '5';
    
    ob_start();
    include 'api/dashboard/summary.php';
    $apiResponse = ob_get_clean();
    
    unset($_GET['include_customers'], $_GET['limit']);
    
    $data = json_decode($apiResponse, true);
    
    if ($data && isset($data['data']['customers'])) {
        echo "<h4>üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Enhanced API:</h4>";
        echo "<table class='table table-sm'>";
        echo "<thead>";
        echo "<tr><th>CustomerCode</th><th>AssignDate</th><th>CreatedDate</th><th>Raw JSON</th></tr>";
        echo "</thead><tbody>";
        
        foreach (array_slice($data['data']['customers'], 0, 5) as $customer) {
            echo "<tr>";
            echo "<td>" . htmlspecialchars($customer['CustomerCode']) . "</td>";
            echo "<td>" . ($customer['AssignDate'] ?? '<span class="text-muted">null</span>') . "</td>";
            echo "<td>" . ($customer['CreatedDate'] ?? '<span class="text-muted">null</span>') . "</td>";
            echo "<td><small><code>" . htmlspecialchars(json_encode([
                'AssignDate' => $customer['AssignDate'] ?? null,
                'CreatedDate' => $customer['CreatedDate'] ?? null
            ])) . "</code></small></td>";
            echo "</tr>";
        }
        
        echo "</tbody></table>";
        echo "<div class='alert alert-success'>‚úÖ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>";
    } else {
        echo "<div class='alert alert-danger'>‚ùå API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</div>";
        echo "<pre>" . htmlspecialchars($apiResponse) . "</pre>";
    }
    
} catch (Exception $e) {
    echo "<div class='alert alert-danger'>‚ùå API test error: " . htmlspecialchars($e->getMessage()) . "</div>";
}

echo "</div>";

// Test 3: JavaScript Test
echo "<div class='test-section'>";
echo "<h2>üíª Test 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö JavaScript formatReceivedDate</h2>";

echo "<div id='js-test-results'></div>";

echo "<script>";
echo "
// Test formatReceivedDate function
const testCustomers = [
    {
        CustomerCode: 'TEST001',
        AssignDate: '2025-01-15',
        CreatedDate: '2025-01-10'
    },
    {
        CustomerCode: 'TEST002',
        AssignDate: null,
        CreatedDate: '2025-01-12'
    },
    {
        CustomerCode: 'TEST003',
        AssignDate: '',
        CreatedDate: '2025-01-14'
    },
    {
        CustomerCode: 'TEST004',
        AssignDate: null,
        CreatedDate: null
    }
];

// Simple test implementation
function formatDate(dateString) {
    if (!dateString || dateString === null || dateString === 'null' || dateString === '') {
        return '';
    }
    
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
            return '';
        }
        
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return day + '/' + month + '/' + year;
    } catch (error) {
        return '';
    }
}

function formatReceivedDate(customer) {
    let dateToFormat = null;
    let source = '';
    
    if (customer.AssignDate && customer.AssignDate !== null && customer.AssignDate !== 'null') {
        dateToFormat = customer.AssignDate;
        source = 'AssignDate';
    } else if (customer.CreatedDate && customer.CreatedDate !== null && customer.CreatedDate !== 'null') {
        dateToFormat = customer.CreatedDate;
        source = 'CreatedDate';
    }
    
    if (!dateToFormat) {
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    }
    
    const formatted = formatDate(dateToFormat);
    if (!formatted) {
        return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î';
    }
    
    const sourceText = source === 'AssignDate' ? '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢' : '‡∏™‡∏£‡πâ‡∏≤‡∏á';
    return formatted + ' (' + sourceText + ')';
}

// Run tests
let results = '<h4>üß™ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö JavaScript:</h4>';
results += '<table class=\"table table-sm\">';
results += '<thead><tr><th>CustomerCode</th><th>AssignDate</th><th>CreatedDate</th><th>Result</th></tr></thead><tbody>';

testCustomers.forEach(customer => {
    const result = formatReceivedDate(customer);
    results += '<tr>';
    results += '<td>' + customer.CustomerCode + '</td>';
    results += '<td>' + (customer.AssignDate || 'null') + '</td>';
    results += '<td>' + (customer.CreatedDate || 'null') + '</td>';
    results += '<td><strong>' + result + '</strong></td>';
    results += '</tr>';
});

results += '</tbody></table>';
results += '<div class=\"alert alert-info\">‚úÖ JavaScript formatReceivedDate ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>';

document.getElementById('js-test-results').innerHTML = results;
";
echo "</script>";

echo "</div>";

// Summary
echo "<div class='test-section'>";
echo "<h2>üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</h2>";

echo "<h4>üîß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</h4>";
echo "<ol>";
echo "<li><strong>‡∏õ‡∏±‡∏ç‡∏´‡∏≤:</strong> ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô</li>";
echo "<li><strong>‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏:</strong> formatDate ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö null values ‡πÅ‡∏•‡∏∞ API ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á null</li>";
echo "<li><strong>‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</strong>";
echo "<ul>";
echo "<li>‡∏™‡∏£‡πâ‡∏≤‡∏á formatReceivedDate() function ‡πÉ‡∏´‡∏°‡πà</li>";
echo "<li>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á formatDate() ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö null values</li>";
echo "<li>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢/‡∏™‡∏£‡πâ‡∏≤‡∏á)</li>";
echo "<li>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ debug logging</li>";
echo "</ul>";
echo "</li>";
echo "</ol>";

echo "<h4>üìÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å:</h4>";
echo "<ul>";
echo "<li><strong>‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç 1:</strong> AssignDate (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢)</li>";
echo "<li><strong>‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç 2:</strong> CreatedDate (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)</li>";
echo "<li><strong>‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:</strong> ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + (‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤)</li>";
echo "</ul>";

echo "<div class='alert alert-success'>";
echo "<h5>‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</h5>";
echo "<p class='mb-0'>‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤</p>";
echo "</div>";

echo "</div>";

echo "</div>"; // container

echo "</body></html>";
?>