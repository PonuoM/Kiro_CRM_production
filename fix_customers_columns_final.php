<?php
/**
 * Fix Customers Table - Add Missing Columns (Final Fix)
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
 */

// Start session
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

require_once 'config/database.php';

echo "<h2>üîß Fix Customers Table - Add Missing Columns (Final)</h2>";
echo "<p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers</p>";

try {
    $db = Database::getInstance();
    $pdo = $db->getConnection();
    echo "‚úÖ Database connected successfully<br><br>";
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    echo "<h3>üìã Current Customers Table Structure</h3>";
    
    try {
        $stmt = $pdo->query("SHOW COLUMNS FROM customers");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        echo "<table border='1' style='border-collapse: collapse; margin: 10px 0; font-size: 12px;'>";
        echo "<tr style='background: #f0f0f0;'><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr>";
        
        $existingColumns = [];
        foreach ($columns as $column) {
            $existingColumns[] = $column['Field'];
            echo "<tr>";
            echo "<td><strong>{$column['Field']}</strong></td>";
            echo "<td>{$column['Type']}</td>";
            echo "<td>{$column['Null']}</td>";
            echo "<td>{$column['Key']}</td>";
            echo "<td>{$column['Default']}</td>";
            echo "<td>{$column['Extra']}</td>";
            echo "</tr>";
        }
        echo "</table>";
        
        echo "<div style='background: #cff4fc; padding: 10px; border-radius: 5px; margin: 10px 0;'>";
        echo "üìä <strong>Found " . count($existingColumns) . " columns in customers table</strong>";
        echo "</div>";
        
    } catch (Exception $e) {
        echo "<div style='background: #f8d7da; padding: 10px; border-radius: 5px;'>";
        echo "‚ùå Error reading table structure: " . $e->getMessage();
        echo "</div>";
        throw $e;
    }
    
    // 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    echo "<h3>üîç Checking Required Columns</h3>";
    
    $requiredColumns = [
        'LastContactDate' => [
            'type' => 'DATETIME',
            'null' => 'YES',
            'default' => 'NULL',
            'comment' => '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
        ],
        'ContactAttempts' => [
            'type' => 'INT(11)',
            'null' => 'NO',
            'default' => '0',
            'comment' => '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'
        ],
        'GradeCalculatedDate' => [
            'type' => 'DATETIME',
            'null' => 'YES',
            'default' => 'NULL',
            'comment' => '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
        ],
        'TemperatureUpdatedDate' => [
            'type' => 'DATETIME',
            'null' => 'YES',
            'default' => 'NULL',
            'comment' => '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
        ]
    ];
    
    $missingColumns = [];
    foreach ($requiredColumns as $columnName => $definition) {
        if (!in_array($columnName, $existingColumns)) {
            $missingColumns[$columnName] = $definition;
            echo "<div style='background: #fff3cd; padding: 5px 10px; margin: 3px 0; border-radius: 3px; font-size: 14px;'>";
            echo "‚ö†Ô∏è Missing column: <strong>$columnName</strong>";
            echo "</div>";
        } else {
            echo "<div style='background: #d4edda; padding: 5px 10px; margin: 3px 0; border-radius: 3px; font-size: 14px;'>";
            echo "‚úÖ Column exists: <strong>$columnName</strong>";
            echo "</div>";
        }
    }
    
    if (empty($missingColumns)) {
        echo "<div style='background: #d4edda; padding: 15px; border-radius: 5px; margin: 15px 0;'>";
        echo "üéâ <strong>All required columns already exist!</strong><br>";
        echo "No need to add any columns.";
        echo "</div>";
    } else {
        // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        echo "<h3>üîß Adding Missing Columns</h3>";
        
        foreach ($missingColumns as $columnName => $definition) {
            try {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL statement
                $sql = "ALTER TABLE customers ADD COLUMN `$columnName` {$definition['type']}";
                
                if ($definition['null'] === 'NO') {
                    $sql .= " NOT NULL";
                } else {
                    $sql .= " NULL";
                }
                
                if ($definition['default'] !== 'NULL') {
                    $sql .= " DEFAULT {$definition['default']}";
                }
                
                $sql .= " COMMENT '{$definition['comment']}'";
                
                echo "<div style='background: #e2e3e5; padding: 8px; border-radius: 5px; margin: 5px 0; font-size: 12px;'>";
                echo "üî® <strong>Executing:</strong> " . htmlspecialchars($sql);
                echo "</div>";
                
                $pdo->exec($sql);
                
                echo "<div style='background: #d4edda; padding: 8px 12px; margin: 5px 0; border-radius: 5px; font-size: 14px;'>";
                echo "‚úÖ Successfully added column: <strong>$columnName</strong>";
                echo "</div>";
                
            } catch (Exception $e) {
                echo "<div style='background: #f8d7da; padding: 8px 12px; margin: 5px 0; border-radius: 5px; font-size: 14px;'>";
                echo "‚ùå Failed to add column $columnName: " . $e->getMessage();
                echo "</div>";
                
                // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                try {
                    $simpleSql = "ALTER TABLE customers ADD `$columnName` {$definition['type']}";
                    $pdo->exec($simpleSql);
                    
                    echo "<div style='background: #d4edda; padding: 8px 12px; margin: 5px 0; border-radius: 5px; font-size: 14px;'>";
                    echo "‚úÖ Added with simple syntax: <strong>$columnName</strong>";
                    echo "</div>";
                } catch (Exception $e2) {
                    echo "<div style='background: #f8d7da; padding: 8px 12px; margin: 5px 0; border-radius: 5px; font-size: 14px;'>";
                    echo "‚ùå Simple syntax also failed: " . $e2->getMessage();
                    echo "</div>";
                }
            }
        }
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå
    echo "<h3>üìä Updated Table Structure</h3>";
    
    try {
        $stmt = $pdo->query("SHOW COLUMNS FROM customers");
        $updatedColumns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $currentColumnNames = array_column($updatedColumns, 'Field');
        
        echo "<div style='background: #cff4fc; padding: 10px; border-radius: 5px; margin: 10px 0;'>";
        echo "üìä <strong>Total columns now: " . count($currentColumnNames) . "</strong><br>";
        echo "New columns: " . implode(', ', array_intersect($currentColumnNames, array_keys($requiredColumns)));
        echo "</div>";
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
        echo "<h4>üÜï New Columns Added:</h4>";
        echo "<table border='1' style='border-collapse: collapse; margin: 10px 0; font-size: 12px;'>";
        echo "<tr style='background: #f0f0f0;'><th>Field</th><th>Type</th><th>Null</th><th>Default</th><th>Status</th></tr>";
        
        foreach ($requiredColumns as $columnName => $definition) {
            $found = false;
            $columnInfo = null;
            
            foreach ($updatedColumns as $column) {
                if ($column['Field'] === $columnName) {
                    $found = true;
                    $columnInfo = $column;
                    break;
                }
            }
            
            $bgColor = $found ? '#d4edda' : '#f8d7da';
            $status = $found ? '‚úÖ EXISTS' : '‚ùå MISSING';
            
            echo "<tr style='background: $bgColor;'>";
            echo "<td><strong>$columnName</strong></td>";
            echo "<td>" . ($columnInfo ? $columnInfo['Type'] : $definition['type']) . "</td>";
            echo "<td>" . ($columnInfo ? $columnInfo['Null'] : $definition['null']) . "</td>";
            echo "<td>" . ($columnInfo ? $columnInfo['Default'] : $definition['default']) . "</td>";
            echo "<td><strong>$status</strong></td>";
            echo "</tr>";
        }
        echo "</table>";
        
    } catch (Exception $e) {
        echo "<div style='background: #f8d7da; padding: 10px; border-radius: 5px;'>";
        echo "‚ùå Error checking updated structure: " . $e->getMessage();
        echo "</div>";
    }
    
    // 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    echo "<h3>üîÑ Updating Initial Data</h3>";
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LastContactDate
    try {
        $stmt = $pdo->query("SELECT COUNT(*) as count FROM customers WHERE LastContactDate IS NULL");
        $nullCount = $stmt->fetch(PDO::FETCH_ASSOC)['count'];
        
        if ($nullCount > 0) {
            $updateSQL = "UPDATE customers SET LastContactDate = DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 30 + 1) DAY) WHERE LastContactDate IS NULL";
            $affected = $pdo->exec($updateSQL);
            
            echo "<div style='background: #d4edda; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
            echo "üìÖ Updated LastContactDate for <strong>$affected</strong> customers";
            echo "</div>";
        }
    } catch (Exception $e) {
        echo "<div style='background: #fff3cd; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "‚ö†Ô∏è Could not update LastContactDate: " . $e->getMessage();
        echo "</div>";
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ContactAttempts
    try {
        $updateSQL = "UPDATE customers SET ContactAttempts = FLOOR(RAND() * 6) WHERE ContactAttempts = 0 OR ContactAttempts IS NULL";
        $affected = $pdo->exec($updateSQL);
        
        echo "<div style='background: #d4edda; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "üìû Updated ContactAttempts for <strong>$affected</strong> customers";
        echo "</div>";
    } catch (Exception $e) {
        echo "<div style='background: #fff3cd; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "‚ö†Ô∏è Could not update ContactAttempts: " . $e->getMessage();
        echo "</div>";
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GradeCalculatedDate
    try {
        $updateSQL = "UPDATE customers SET GradeCalculatedDate = NOW() WHERE GradeCalculatedDate IS NULL";
        $affected = $pdo->exec($updateSQL);
        
        echo "<div style='background: #d4edda; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "‚ö° Updated GradeCalculatedDate for <strong>$affected</strong> customers";
        echo "</div>";
    } catch (Exception $e) {
        echo "<div style='background: #fff3cd; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "‚ö†Ô∏è Could not update GradeCalculatedDate: " . $e->getMessage();
        echo "</div>";
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TemperatureUpdatedDate
    try {
        $updateSQL = "UPDATE customers SET TemperatureUpdatedDate = NOW() WHERE TemperatureUpdatedDate IS NULL";
        $affected = $pdo->exec($updateSQL);
        
        echo "<div style='background: #d4edda; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "üå°Ô∏è Updated TemperatureUpdatedDate for <strong>$affected</strong> customers";
        echo "</div>";
    } catch (Exception $e) {
        echo "<div style='background: #fff3cd; padding: 8px; border-radius: 5px; margin: 5px 0;'>";
        echo "‚ö†Ô∏è Could not update TemperatureUpdatedDate: " . $e->getMessage();
        echo "</div>";
    }
    
    // 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Temperature Logic ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà
    echo "<h3>üå°Ô∏è Applying New Temperature Logic</h3>";
    
    $temperatureUpdates = [
        [
            'sql' => "UPDATE customers SET CustomerTemperature = 'HOT', TemperatureUpdatedDate = NOW() WHERE CustomerStatus IN ('‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', '‡∏™‡∏ô‡πÉ‡∏à', '‡∏Ñ‡∏∏‡∏¢‡∏à‡∏ö') OR LastContactDate >= DATE_SUB(NOW(), INTERVAL 7 DAY)",
            'label' => 'HOT - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà, ‡∏™‡∏ô‡πÉ‡∏à, ‡∏Ñ‡∏∏‡∏¢‡∏à‡∏ö, ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô',
            'color' => '#ffe6e6'
        ],
        [
            'sql' => "UPDATE customers SET CustomerTemperature = 'COLD', TemperatureUpdatedDate = NOW() WHERE CustomerStatus IN ('‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ') OR ContactAttempts >= 3",
            'label' => 'COLD - ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à, ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ 3+ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            'color' => '#f0f0f0'
        ],
        [
            'sql' => "UPDATE customers SET CustomerTemperature = 'WARM', TemperatureUpdatedDate = NOW() WHERE CustomerTemperature NOT IN ('HOT', 'COLD')",
            'label' => 'WARM - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå HOT ‡∏´‡∏£‡∏∑‡∏≠ COLD)',
            'color' => '#fff3cd'
        ]
    ];
    
    $totalTempUpdated = 0;
    foreach ($temperatureUpdates as $update) {
        try {
            $affected = $pdo->exec($update['sql']);
            $totalTempUpdated += $affected;
            
            echo "<div style='background: {$update['color']}; padding: 8px 12px; margin: 5px 0; border-radius: 5px; font-size: 14px;'>";
            echo "üå°Ô∏è <strong>$affected</strong> customers ‚Üí <strong>{$update['label']}</strong>";
            echo "</div>";
        } catch (Exception $e) {
            echo "<div style='background: #f8d7da; padding: 8px 12px; margin: 5px 0; border-radius: 5px; font-size: 14px;'>";
            echo "‚ùå Temperature update failed: " . $e->getMessage();
            echo "</div>";
        }
    }
    
    // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    echo "<h3>üß™ Testing Updated Data</h3>";
    
    try {
        $stmt = $pdo->query("SELECT CustomerCode, CustomerName, CustomerGrade, CustomerTemperature, TotalPurchase, LastContactDate, ContactAttempts FROM customers ORDER BY CustomerGrade, TotalPurchase DESC LIMIT 5");
        $sampleData = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        if (count($sampleData) > 0) {
            echo "<table border='1' style='border-collapse: collapse; margin: 10px 0; font-size: 12px;'>";
            echo "<tr style='background: #f0f0f0;'><th>Code</th><th>Name</th><th>Grade</th><th>Temp</th><th>Purchase</th><th>Last Contact</th><th>Attempts</th></tr>";
            
            foreach ($sampleData as $customer) {
                $gradeColors = ['A' => '#e8f5e8', 'B' => '#cff4fc', 'C' => '#fff3cd', 'D' => '#f8d7da'];
                $bgColor = $gradeColors[$customer['CustomerGrade']] ?? '#fff';
                
                echo "<tr style='background: $bgColor;'>";
                echo "<td><strong>{$customer['CustomerCode']}</strong></td>";
                echo "<td>{$customer['CustomerName']}</td>";
                echo "<td><strong>{$customer['CustomerGrade']}</strong></td>";
                echo "<td><strong>{$customer['CustomerTemperature']}</strong></td>";
                echo "<td><strong>" . number_format($customer['TotalPurchase'], 0) . " ‡∏ø</strong></td>";
                echo "<td>" . ($customer['LastContactDate'] ? date('d/m/Y', strtotime($customer['LastContactDate'])) : '‡πÑ‡∏°‡πà‡∏°‡∏µ') . "</td>";
                echo "<td>{$customer['ContactAttempts']}</td>";
                echo "</tr>";
            }
            echo "</table>";
        }
    } catch (Exception $e) {
        echo "<div style='background: #f8d7da; padding: 10px; border-radius: 5px;'>";
        echo "‚ùå Error testing data: " . $e->getMessage();
        echo "</div>";
    }
    
} catch (Exception $e) {
    echo "<div style='background: #f8d7da; padding: 15px; border-radius: 5px;'>";
    echo "‚ùå <strong>Critical Error:</strong> " . $e->getMessage();
    echo "</div>";
}

echo "<h3>üöÄ Final Results</h3>";
echo "<div style='background: #d4edda; padding: 15px; border-radius: 5px;'>";
echo "‚úÖ <strong>Customers Table Update Complete!</strong><br>";
echo "üìä <strong>What was done:</strong><br>";
echo "1. ‚úÖ Checked existing table structure<br>";
echo "2. ‚úÖ Added missing columns (LastContactDate, ContactAttempts, GradeCalculatedDate, TemperatureUpdatedDate)<br>";
echo "3. ‚úÖ Updated initial data for all columns<br>";
echo "4. üå°Ô∏è Applied new Temperature Logic:<br>";
echo "&nbsp;&nbsp;&nbsp;‚Ä¢ <strong>HOT</strong>: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà, ‡∏™‡∏ô‡πÉ‡∏à, ‡∏Ñ‡∏∏‡∏¢‡∏à‡∏ö, ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô<br>";
echo "&nbsp;&nbsp;&nbsp;‚Ä¢ <strong>WARM</strong>: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå HOT/COLD<br>";  
echo "&nbsp;&nbsp;&nbsp;‚Ä¢ <strong>COLD</strong>: ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à, ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ 3+ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á<br>";
echo "5. ‚úÖ Tested final data structure<br>";
echo "<br>üéØ <strong>Expected Results:</strong><br>";
echo "- ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏à‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ LastContactDate error<br>";
echo "- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô<br>";
echo "- Temperature Logic ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà";
echo "</div>";

echo "<h3>üîó Quick Test Links</h3>";
echo "<a href='pages/admin/distribution_basket.php' target='_blank'>üóÉÔ∏è Test Distribution Basket</a> | ";
echo "<a href='pages/admin/waiting_basket.php' target='_blank'>‚è≥ Test Waiting Basket</a> | ";
echo "<a href='pages/admin/intelligence_system.php' target='_blank'>üß† Test Intelligence System</a>";

echo "<div style='margin-top: 20px; padding: 10px; background: #f8f9fa; border-radius: 5px; border-left: 4px solid #28a745;'>";
echo "<strong>üéâ Database Schema Fixed Successfully!</strong><br>";
echo "‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡πà‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô<br>";
echo "Temperature Logic ‡πÅ‡∏•‡∏∞ Grade Logic ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà! üåü";
echo "</div>";
?>