<?php
/**
 * Fix Customer Intelligence Grades - Safe Version
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Grade calculation ‡πÅ‡∏•‡∏∞ sync TotalPurchase ‡∏à‡∏≤‡∏Å orders table
 * Version ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */

require_once 'config/database.php';

header('Content-Type: text/html; charset=utf-8');

try {
    $db = Database::getInstance();
    $pdo = $db->getConnection();
    
    echo "<h2>üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Customer Intelligence Grades (Safe Version)</h2>\n";
    echo "<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...</p>\n";
    flush();
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers
    echo "<h3>1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á</h3>\n";
    
    $columnsSql = "SHOW COLUMNS FROM customers";
    $columnsStmt = $pdo->prepare($columnsSql);
    $columnsStmt->execute();
    $columns = $columnsStmt->fetchAll(PDO::FETCH_ASSOC);
    
    $hasGrade = false;
    $hasTotalPurchase = false;
    $hasLastPurchaseDate = false;
    $hasGradeCalculatedDate = false;
    
    foreach ($columns as $column) {
        if ($column['Field'] === 'CustomerGrade') $hasGrade = true;
        if ($column['Field'] === 'TotalPurchase') $hasTotalPurchase = true;
        if ($column['Field'] === 'LastPurchaseDate') $hasLastPurchaseDate = true;
        if ($column['Field'] === 'GradeCalculatedDate') $hasGradeCalculatedDate = true;
    }
    
    echo "<p>Columns ‡∏ó‡∏µ‡πà‡∏û‡∏ö:</p>\n";
    echo "<ul>\n";
    echo "<li>CustomerGrade: " . ($hasGrade ? '‚úÖ' : '‚ùå') . "</li>\n";
    echo "<li>TotalPurchase: " . ($hasTotalPurchase ? '‚úÖ' : '‚ùå') . "</li>\n";
    echo "<li>LastPurchaseDate: " . ($hasLastPurchaseDate ? '‚úÖ' : '‚ùå') . "</li>\n";
    echo "<li>GradeCalculatedDate: " . ($hasGradeCalculatedDate ? '‚úÖ' : '‚ùå') . "</li>\n";
    echo "</ul>\n";
    flush();
    
    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    $needsColumns = [];
    if (!$hasGrade) $needsColumns[] = "ADD COLUMN CustomerGrade ENUM('A', 'B', 'C', 'D') NULL COMMENT 'Customer Grade based on purchase amount'";
    if (!$hasTotalPurchase) $needsColumns[] = "ADD COLUMN TotalPurchase DECIMAL(10,2) DEFAULT 0.00 COMMENT 'Total purchase amount for grading'";
    if (!$hasLastPurchaseDate) $needsColumns[] = "ADD COLUMN LastPurchaseDate DATE NULL COMMENT 'Last purchase date'";
    if (!$hasGradeCalculatedDate) $needsColumns[] = "ADD COLUMN GradeCalculatedDate DATETIME NULL COMMENT 'When grade was last calculated'";
    
    if (count($needsColumns) > 0) {
        echo "<h3>2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</h3>\n";
        
        $alterSql = "ALTER TABLE customers " . implode(", ", $needsColumns);
        
        try {
            $alterStmt = $pdo->prepare($alterSql);
            $alterStmt->execute();
            echo "<p>‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>\n";
            flush();
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ flags
            $hasGrade = true;
            $hasTotalPurchase = true;
            $hasLastPurchaseDate = true;
            $hasGradeCalculatedDate = true;
            
        } catch (Exception $e) {
            echo "<p>‚ùå Error adding columns: " . $e->getMessage() . "</p>\n";
            throw $e;
        }
    } else {
        echo "<h3>2. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡∏°‡∏µ columns ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß</h3>\n";
        echo "<p>‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</p>\n";
    }
    flush();
    
    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TotalPurchase ‡∏à‡∏≤‡∏Å orders table
    echo "<h3>3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TotalPurchase ‡∏à‡∏≤‡∏Å orders table</h3>\n";
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    $updateFields = ["TotalPurchase = COALESCE((
        SELECT SUM(TotalAmount) 
        FROM orders o 
        WHERE o.CustomerCode = c.CustomerCode 
        AND o.OrderStatus IN ('completed', 'paid', 'pending')
    ), 0)"];
    
    if ($hasLastPurchaseDate) {
        $updateFields[] = "LastPurchaseDate = (
            SELECT MAX(OrderDate) 
            FROM orders o 
            WHERE o.CustomerCode = c.CustomerCode
        )";
    }
    
    $updateTotalSql = "
        UPDATE customers c
        SET " . implode(", ", $updateFields) . "
        WHERE c.CustomerCode IS NOT NULL
    ";
    
    try {
        $updateStmt = $pdo->prepare($updateTotalSql);
        $updateStmt->execute();
        $affectedRows = $updateStmt->rowCount();
        
        echo "<p>‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TotalPurchase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {$affectedRows} ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>\n";
        flush();
    } catch (Exception $e) {
        echo "<p>‚ùå Error updating TotalPurchase: " . $e->getMessage() . "</p>\n";
        throw $e;
    }
    
    // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Grade ‡∏ó‡∏∏‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    echo "<h3>4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Customer Grade</h3>\n";
    
    $gradeFields = [
        "CustomerGrade = CASE 
            WHEN TotalPurchase >= 10000 THEN 'A'
            WHEN TotalPurchase >= 5000 THEN 'B'
            WHEN TotalPurchase >= 2000 THEN 'C'
            ELSE 'D'
        END"
    ];
    
    if ($hasGradeCalculatedDate) {
        $gradeFields[] = "GradeCalculatedDate = NOW()";
    }
    
    $gradeUpdateSql = "
        UPDATE customers 
        SET " . implode(", ", $gradeFields) . "
        WHERE CustomerCode IS NOT NULL
    ";
    
    try {
        $gradeStmt = $pdo->prepare($gradeUpdateSql);
        $gradeStmt->execute();
        $gradeRows = $gradeStmt->rowCount();
        
        echo "<p>‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Grade ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {$gradeRows} ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>\n";
        flush();
    } catch (Exception $e) {
        echo "<p>‚ùå Error updating grades: " . $e->getMessage() . "</p>\n";
        throw $e;
    }
    
    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUST003
    echo "<h3>5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUST003</h3>\n";
    
    $cust003Fields = ["CustomerCode", "CustomerName", "TotalPurchase", "CustomerGrade"];
    if ($hasGradeCalculatedDate) $cust003Fields[] = "GradeCalculatedDate";
    if ($hasLastPurchaseDate) $cust003Fields[] = "LastPurchaseDate";
    
    $cust003Sql = "SELECT " . implode(", ", $cust003Fields) . " 
                   FROM customers WHERE CustomerCode = 'CUST003'";
    
    try {
        $cust003Stmt = $pdo->prepare($cust003Sql);
        $cust003Stmt->execute();
        $cust003 = $cust003Stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($cust003) {
            echo "<table border='1' style='border-collapse: collapse; margin: 10px 0;'>\n";
            echo "<tr><th>Field</th><th>Value</th></tr>\n";
            foreach ($cust003 as $field => $value) {
                echo "<tr><td>{$field}</td><td>{$value}</td></tr>\n";
            }
            echo "</table>\n";
            
            if ($cust003['CustomerGrade'] === 'A') {
                echo "<p style='color: green;'>üéâ <strong>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong> CUST003 ‡πÑ‡∏î‡πâ Grade A ‡πÅ‡∏•‡πâ‡∏ß</p>\n";
            } else {
                echo "<p style='color: red;'>‚ùå <strong>‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤</strong> CUST003 ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Grade A (‡πÑ‡∏î‡πâ Grade {$cust003['CustomerGrade']})</p>\n";
            }
        } else {
            echo "<p>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CUST003</p>\n";
        }
    } catch (Exception $e) {
        echo "<p>‚ùå Error checking CUST003: " . $e->getMessage() . "</p>\n";
    }
    flush();
    
    // 6. ‡πÅ‡∏™‡∏î‡∏á Grade distribution
    echo "<h3>6. Grade Distribution</h3>\n";
    
    try {
        $distSql = "SELECT CustomerGrade, COUNT(*) as count, 
                           MIN(TotalPurchase) as min_purchase,
                           MAX(TotalPurchase) as max_purchase,
                           AVG(TotalPurchase) as avg_purchase
                    FROM customers 
                    WHERE CustomerGrade IS NOT NULL
                    GROUP BY CustomerGrade 
                    ORDER BY CustomerGrade";
        
        $distStmt = $pdo->prepare($distSql);
        $distStmt->execute();
        $distribution = $distStmt->fetchAll(PDO::FETCH_ASSOC);
        
        echo "<table border='1' style='border-collapse: collapse; margin: 10px 0;'>\n";
        echo "<tr><th>Grade</th><th>Count</th><th>Min Purchase</th><th>Max Purchase</th><th>Avg Purchase</th></tr>\n";
        
        foreach ($distribution as $grade) {
            echo "<tr>\n";
            echo "<td><strong>{$grade['CustomerGrade']}</strong></td>\n";
            echo "<td>{$grade['count']}</td>\n";
            echo "<td>‡∏ø" . number_format($grade['min_purchase'], 2) . "</td>\n";
            echo "<td>‡∏ø" . number_format($grade['max_purchase'], 2) . "</td>\n";
            echo "<td>‡∏ø" . number_format($grade['avg_purchase'], 2) . "</td>\n";
            echo "</tr>\n";
        }
        echo "</table>\n";
    } catch (Exception $e) {
        echo "<p>‚ùå Error getting distribution: " . $e->getMessage() . "</p>\n";
    }
    
    // 7. ‡πÅ‡∏™‡∏î‡∏á Grade A customers
    echo "<h3>7. Grade A Customers (Top 10)</h3>\n";
    
    try {
        $gradeASql = "SELECT CustomerCode, CustomerName, TotalPurchase";
        if ($hasGradeCalculatedDate) $gradeASql .= ", GradeCalculatedDate";
        $gradeASql .= " FROM customers 
                      WHERE CustomerGrade = 'A' 
                      ORDER BY TotalPurchase DESC 
                      LIMIT 10";
        
        $gradeAStmt = $pdo->prepare($gradeASql);
        $gradeAStmt->execute();
        $gradeACustomers = $gradeAStmt->fetchAll(PDO::FETCH_ASSOC);
        
        if ($gradeACustomers) {
            echo "<table border='1' style='border-collapse: collapse; margin: 10px 0;'>\n";
            echo "<tr><th>CustomerCode</th><th>CustomerName</th><th>TotalPurchase</th>";
            if ($hasGradeCalculatedDate) echo "<th>GradeCalculatedDate</th>";
            echo "</tr>\n";
            
            foreach ($gradeACustomers as $customer) {
                $highlight = ($customer['CustomerCode'] === 'CUST003') ? 'style="background-color: #ffeb3b;"' : '';
                echo "<tr {$highlight}>\n";
                echo "<td>{$customer['CustomerCode']}</td>\n";
                echo "<td>{$customer['CustomerName']}</td>\n";
                echo "<td>‡∏ø" . number_format($customer['TotalPurchase'], 2) . "</td>\n";
                if ($hasGradeCalculatedDate) echo "<td>{$customer['GradeCalculatedDate']}</td>\n";
                echo "</tr>\n";
            }
            echo "</table>\n";
        } else {
            echo "<p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ Grade A</p>\n";
        }
    } catch (Exception $e) {
        echo "<p>‚ùå Error getting Grade A customers: " . $e->getMessage() . "</p>\n";
    }
    
    echo "<hr>\n";
    echo "<h3>‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</h3>\n";
    echo "<p>Grade calculation ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß</p>\n";
    echo "<p><a href='pages/customer_intelligence.php'>üîó ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Customer Intelligence</a></p>\n";
    echo "<p><a href='test_customer_intelligence_fixes.php'>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</a></p>\n";
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Error: " . $e->getMessage() . "</p>\n";
    echo "<p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á</p>\n";
}
?>