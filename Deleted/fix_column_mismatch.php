<?php
/**
 * Fix Database Column Mismatch Issues
 * This script identifies and fixes column naming mismatches
 */

require_once 'config/database.php';

try {
    $db = Database::getInstance();
    $pdo = $db->getConnection();
    
    echo "<h2>üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Column Mismatch</h2>";
    
    // 1. Check current table structure
    echo "<h3>üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users</h3>";
    
    $stmt = $pdo->query("DESCRIBE users");
    $columns = $stmt->fetchAll();
    
    $existingColumns = [];
    echo "<div style='background:#f8f9fa; padding:10px; margin:10px 0; font-family:monospace;'>";
    echo "<strong>‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users:</strong><br>";
    foreach ($columns as $col) {
        $existingColumns[] = $col['Field'];
        echo "‚úÖ {$col['Field']} ({$col['Type']})<br>";
    }
    echo "</div>";
    
    // 2. Check if we need to add missing columns or update existing ones
    $requiredColumns = [
        'Username' => 'NVARCHAR(50)',
        'Password' => 'NVARCHAR(255)',
        'FirstName' => 'NVARCHAR(200)',
        'LastName' => 'NVARCHAR(200)',
        'Email' => 'NVARCHAR(200)',
        'Phone' => 'NVARCHAR(200)',
        'Role' => "ENUM('Admin', 'Supervisor', 'Sale')",
        'Status' => 'INT',
        'CreatedDate' => 'DATETIME',
        'ModifiedDate' => 'DATETIME'
    ];
    
    echo "<h3>üî® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á</h3>";
    
    $missingColumns = array_diff(array_keys($requiredColumns), $existingColumns);
    
    if (!empty($missingColumns)) {
        echo "<div style='background:#fff3cd; padding:10px; margin:10px 0;'>";
        echo "<strong>‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢:</strong><br>";
        
        foreach ($missingColumns as $column) {
            echo "‚ùå {$column}<br>";
            
            try {
                $alterSql = "ALTER TABLE users ADD COLUMN {$column} {$requiredColumns[$column]}";
                if ($column === 'Status') {
                    $alterSql .= " DEFAULT 1";
                } elseif ($column === 'CreatedDate') {
                    $alterSql .= " DEFAULT CURRENT_TIMESTAMP";
                } elseif ($column === 'ModifiedDate') {
                    $alterSql .= " ON UPDATE CURRENT_TIMESTAMP";
                }
                
                $pdo->exec($alterSql);
                echo "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {$column} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
            } catch (Exception $e) {
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {$column}: " . $e->getMessage() . "<br>";
            }
        }
        echo "</div>";
    } else {
        echo "<div style='background:#d4edda; padding:10px; margin:10px 0;'>";
        echo "‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç";
        echo "</div>";
    }
    
    // 3. Check customer table structure
    echo "<h3>üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers</h3>";
    
    $stmt = $pdo->query("DESCRIBE customers");
    $customerCols = $stmt->fetchAll();
    
    echo "<div style='background:#f8f9fa; padding:10px; margin:10px 0; font-family:monospace;'>";
    echo "<strong>‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers:</strong><br>";
    foreach ($customerCols as $col) {
        echo "‚úÖ {$col['Field']} ({$col['Type']})<br>";
    }
    echo "</div>";
    
    // 4. Test database connection with proper SQL syntax
    echo "<h3>üîå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>";
    
    try {
        // Fix the SQL syntax error from the original error
        $testQuery = "SELECT NOW() as current_time, DATABASE() as db_name";
        $result = $pdo->query($testQuery);
        $row = $result->fetch();
        
        echo "<div style='background:#d4edda; padding:10px; margin:10px 0;'>";
        echo "‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
        echo "üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " . $row['current_time'] . "<br>";
        echo "üóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " . $row['db_name'] . "<br>";
        echo "</div>";
    } catch (Exception $e) {
        echo "<div style='background:#f8d7da; padding:10px; margin:10px 0;'>";
        echo "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: " . $e->getMessage();
        echo "</div>";
    }
    
    // 5. Create a compatibility layer for create_sample_data.php
    echo "<h3>üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h3>";
    
    // Test insert with correct column names
    $testUserSql = "INSERT INTO users (Username, Password, FirstName, LastName, Email, Phone, Role, Status, CreatedDate, ModifiedDate) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
                    ON DUPLICATE KEY UPDATE 
                    FirstName = VALUES(FirstName), 
                    ModifiedDate = NOW()";
    
    try {
        $stmt = $pdo->prepare($testUserSql);
        $result = $stmt->execute([
            'test_user', 
            password_hash('test123', PASSWORD_DEFAULT),
            '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
            '‡∏£‡∏∞‡∏ö‡∏ö',
            'test@test.com',
            '02-000-0000',
            'Sale',
            1
        ]);
        
        echo "<div style='background:#d4edda; padding:10px; margin:10px 0;'>";
        echo "‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
        echo "</div>";
        
        // Clean up test data
        $pdo->exec("DELETE FROM users WHERE Username = 'test_user'");
        
    } catch (Exception $e) {
        echo "<div style='background:#f8d7da; padding:10px; margin:10px 0;'>";
        echo "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Insert: " . $e->getMessage();
        echo "</div>";
    }
    
    echo "<h3>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</h3>";
    echo "<div style='background:#e7f3ff; padding:15px; border-radius:8px; margin:10px 0;'>";
    echo "<strong>‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</strong><br><br>";
    echo "<strong>üîß ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</strong><br>";
    echo "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î<br>";
    echo "‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô<br>";
    echo "‚Ä¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL syntax error<br>";
    echo "‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•<br><br>";
    echo "<strong>üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong><br>";
    echo "1. ‡∏£‡∏±‡∏ô <a href='create_sample_data.php'>create_sample_data.php</a> ‡πÉ‡∏´‡∏°‡πà<br>";
    echo "2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤<br>";
    echo "3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö<br>";
    echo "</div>";
    
} catch(Exception $e) {
    echo "<h3>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</h3>";
    echo "<div style='background:#f8d7da; color:#721c24; padding:15px; border-radius:8px;'>";
    echo "Error: " . $e->getMessage() . "<br>";
    echo "File: " . $e->getFile() . "<br>";
    echo "Line: " . $e->getLine() . "<br>";
    echo "</div>";
}
?>