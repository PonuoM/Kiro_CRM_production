<?php
/**
 * Complete Database Repair Script
 * This script performs a comprehensive database repair and schema verification
 */

require_once 'config/database.php';

try {
    $db = Database::getInstance();
    $pdo = $db->getConnection();
    
    echo "<h2>üîß ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</h2>";
    echo "<div style='background:#f8f9fa; padding:15px; margin:10px 0; border-radius:8px;'>";
    
    // Step 1: Check and create missing tables
    echo "<h3>üìã Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</h3>";
    
    // Check users table
    $checkUsers = "SHOW TABLES LIKE 'users'";
    $result = $pdo->query($checkUsers);
    
    if ($result->rowCount() == 0) {
        echo "‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...<br>";
        $createUsers = "
        CREATE TABLE users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            Username NVARCHAR(50) UNIQUE NOT NULL,
            Password NVARCHAR(255) NOT NULL,
            FirstName NVARCHAR(200) NOT NULL,
            LastName NVARCHAR(200) NOT NULL,
            Email NVARCHAR(200),
            Phone NVARCHAR(200),
            CompanyCode NVARCHAR(10),
            Position NVARCHAR(200),
            Role ENUM('Admin', 'Supervisor', 'Sale') NOT NULL,
            LastLoginDate DATETIME,
            Status INT DEFAULT 1,
            CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
            CreatedBy NVARCHAR(50),
            ModifiedDate DATETIME ON UPDATE CURRENT_TIMESTAMP,
            ModifiedBy NVARCHAR(50),
            
            INDEX idx_username (Username),
            INDEX idx_role (Role),
            INDEX idx_status (Status)
        ) ENGINE=InnoDB COLLATE=utf8mb4_unicode_ci COMMENT='User accounts and authentication'";
        
        $pdo->exec($createUsers);
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    } else {
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß<br>";
    }
    
    // Check customers table
    $checkCustomers = "SHOW TABLES LIKE 'customers'";
    $result = $pdo->query($checkCustomers);
    
    if ($result->rowCount() == 0) {
        echo "‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...<br>";
        $createCustomers = "
        CREATE TABLE customers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            CustomerCode NVARCHAR(50) UNIQUE NOT NULL,
            CustomerName NVARCHAR(500) NOT NULL,
            CustomerTel NVARCHAR(200) UNIQUE NOT NULL,
            CustomerEmail NVARCHAR(200),
            CustomerAddress NVARCHAR(500),
            CustomerProvince NVARCHAR(200),
            CustomerPostalCode NVARCHAR(50),
            Agriculture NVARCHAR(200),
            CustomerStatus ENUM('‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤') DEFAULT '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
            CartStatus ENUM('‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏à‡∏Å', '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏£‡∏≠', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•') DEFAULT '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•',
            CustomerGrade ENUM('A', 'B', 'C', 'D') DEFAULT 'D',
            CustomerTemperature ENUM('HOT', 'WARM', 'COLD') DEFAULT 'COLD',
            TotalPurchase VARCHAR(20),
            Sales NVARCHAR(50),
            AssignDate DATETIME,
            OrderDate DATETIME,
            CallStatus NVARCHAR(50),
            TalkStatus NVARCHAR(50),
            Tags NVARCHAR(500),
            CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
            CreatedBy NVARCHAR(50),
            ModifiedDate DATETIME ON UPDATE CURRENT_TIMESTAMP,
            ModifiedBy NVARCHAR(50),
            
            INDEX idx_customer_code (CustomerCode),
            INDEX idx_customer_tel (CustomerTel),
            INDEX idx_customer_status (CustomerStatus),
            INDEX idx_sales (Sales)
        ) ENGINE=InnoDB COLLATE=utf8mb4_unicode_ci COMMENT='Customer information'";
        
        $pdo->exec($createCustomers);
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    } else {
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß<br>";
    }
    
    // Step 2: Add missing columns to existing tables
    echo "<h3>üîß Step 2: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢</h3>";
    
    // Check if customers table has CustomerGrade and CustomerTemperature
    $stmt = $pdo->query("DESCRIBE customers");
    $customerColumns = array_column($stmt->fetchAll(), 'Field');
    
    if (!in_array('CustomerGrade', $customerColumns)) {
        echo "‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå CustomerGrade...<br>";
        $pdo->exec("ALTER TABLE customers ADD COLUMN CustomerGrade ENUM('A', 'B', 'C', 'D') DEFAULT 'D' AFTER CustomerStatus");
        echo "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CustomerGrade ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    if (!in_array('CustomerTemperature', $customerColumns)) {
        echo "‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå CustomerTemperature...<br>";
        $pdo->exec("ALTER TABLE customers ADD COLUMN CustomerTemperature ENUM('HOT', 'WARM', 'COLD') DEFAULT 'COLD' AFTER CustomerGrade");
        echo "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CustomerTemperature ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    if (!in_array('TotalPurchase', $customerColumns)) {
        echo "‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå TotalPurchase...<br>";
        $pdo->exec("ALTER TABLE customers ADD COLUMN TotalPurchase VARCHAR(20) AFTER CustomerTemperature");
        echo "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° TotalPurchase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    if (!in_array('CustomerEmail', $customerColumns)) {
        echo "‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå CustomerEmail...<br>";
        $pdo->exec("ALTER TABLE customers ADD COLUMN CustomerEmail NVARCHAR(200) AFTER CustomerTel");
        echo "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CustomerEmail ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    // Step 3: Create orders table if missing
    $checkOrders = "SHOW TABLES LIKE 'orders'";
    $result = $pdo->query($checkOrders);
    
    if ($result->rowCount() == 0) {
        echo "‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...<br>";
        $createOrders = "
        CREATE TABLE orders (
            id INT AUTO_INCREMENT PRIMARY KEY,
            OrderCode VARCHAR(50) NOT NULL UNIQUE,
            CustomerCode VARCHAR(50) NOT NULL,
            DocumentDate DATETIME DEFAULT CURRENT_TIMESTAMP,
            OrderDate DATETIME DEFAULT CURRENT_TIMESTAMP,
            DocumentNo VARCHAR(50),
            ProductName TEXT,
            Products TEXT,
            Quantity INT DEFAULT 1,
            TotalAmount VARCHAR(20),
            Price VARCHAR(20),
            PaymentMethod VARCHAR(50) DEFAULT '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
            CreatedBy VARCHAR(50),
            OrderBy VARCHAR(50),
            CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_customer (CustomerCode),
            INDEX idx_order_date (OrderDate),
            FOREIGN KEY (CustomerCode) REFERENCES customers(CustomerCode) ON UPDATE CASCADE
        ) ENGINE=InnoDB COLLATE=utf8mb4_unicode_ci COMMENT='Customer orders'";
        
        $pdo->exec($createOrders);
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    } else {
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß<br>";
    }
    
    // Step 4: Create other missing tables
    $requiredTables = ['call_logs', 'tasks', 'sales_histories'];
    
    foreach ($requiredTables as $table) {
        $checkTable = "SHOW TABLES LIKE '$table'";
        $result = $pdo->query($checkTable);
        
        if ($result->rowCount() == 0) {
            echo "‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...<br>";
            
            switch ($table) {
                case 'call_logs':
                    $createSQL = "
                    CREATE TABLE call_logs (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        CustomerCode NVARCHAR(50) NOT NULL,
                        CallDate DATETIME NOT NULL,
                        CallTime NVARCHAR(50),
                        CallMinutes NVARCHAR(50),
                        CallStatus ENUM('‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ') NOT NULL,
                        CallReason NVARCHAR(500),
                        TalkStatus ENUM('‡∏Ñ‡∏∏‡∏¢‡∏à‡∏ö', '‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏ö'),
                        TalkReason NVARCHAR(500),
                        Remarks NVARCHAR(500),
                        CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
                        CreatedBy NVARCHAR(50),
                        
                        FOREIGN KEY (CustomerCode) REFERENCES customers(CustomerCode) ON DELETE CASCADE ON UPDATE CASCADE,
                        INDEX idx_customer_code (CustomerCode),
                        INDEX idx_call_date (CallDate)
                    ) ENGINE=InnoDB COLLATE=utf8mb4_unicode_ci COMMENT='Customer communication logs'";
                    break;
                    
                case 'tasks':
                    $createSQL = "
                    CREATE TABLE tasks (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        CustomerCode NVARCHAR(50) NOT NULL,
                        FollowupDate DATETIME NOT NULL,
                        Remarks NVARCHAR(500),
                        Status ENUM('‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô') DEFAULT '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                        CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
                        CreatedBy NVARCHAR(50),
                        ModifiedDate DATETIME ON UPDATE CURRENT_TIMESTAMP,
                        ModifiedBy NVARCHAR(50),
                        
                        FOREIGN KEY (CustomerCode) REFERENCES customers(CustomerCode) ON DELETE CASCADE ON UPDATE CASCADE,
                        INDEX idx_customer_code (CustomerCode),
                        INDEX idx_followup_date (FollowupDate)
                    ) ENGINE=InnoDB COLLATE=utf8mb4_unicode_ci COMMENT='Follow-up tasks'";
                    break;
                    
                case 'sales_histories':
                    $createSQL = "
                    CREATE TABLE sales_histories (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        CustomerCode NVARCHAR(50) NOT NULL,
                        SaleName NVARCHAR(50) NOT NULL,
                        StartDate DATETIME NOT NULL,
                        EndDate DATETIME,
                        AssignBy NVARCHAR(50),
                        CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
                        CreatedBy NVARCHAR(50),
                        
                        FOREIGN KEY (CustomerCode) REFERENCES customers(CustomerCode) ON DELETE CASCADE ON UPDATE CASCADE,
                        INDEX idx_customer_code (CustomerCode)
                    ) ENGINE=InnoDB COLLATE=utf8mb4_unicode_ci COMMENT='Sales assignment history'";
                    break;
            }
            
            $pdo->exec($createSQL);
            echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
        } else {
            echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß<br>";
        }
    }
    
    // Step 5: Create admin user if not exists
    echo "<h3>üë§ Step 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Admin</h3>";
    
    $checkAdmin = "SELECT COUNT(*) as count FROM users WHERE Username = 'admin'";
    $stmt = $pdo->query($checkAdmin);
    $result = $stmt->fetch();
    
    if ($result['count'] == 0) {
        echo "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô admin - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...<br>";
        $createAdmin = "INSERT INTO users (Username, Password, FirstName, LastName, Email, Phone, Role, Status, CreatedDate, CreatedBy) 
                       VALUES ('admin', ?, '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö', '‡∏´‡∏•‡∏±‡∏Å', 'admin@company.com', '02-000-0000', 'Admin', 1, NOW(), 'system')";
        $stmt = $pdo->prepare($createAdmin);
        $stmt->execute([password_hash('admin123', PASSWORD_DEFAULT)]);
        echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: admin123)<br>";
    } else {
        echo "‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô admin ‡πÅ‡∏•‡πâ‡∏ß<br>";
    }
    
    // Step 6: Final verification
    echo "<h3>‚úÖ Step 4: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢</h3>";
    
    $tables = ['users', 'customers', 'orders', 'call_logs', 'tasks', 'sales_histories'];
    $allTablesOK = true;
    
    foreach ($tables as $table) {
        try {
            $stmt = $pdo->query("SELECT COUNT(*) as count FROM $table");
            $result = $stmt->fetch();
            echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table: {$result['count']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
        } catch (Exception $e) {
            echo "‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á $table: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - " . $e->getMessage() . "<br>";
            $allTablesOK = false;
        }
    }
    
    echo "<h3>üéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°</h3>";
    
    if ($allTablesOK) {
        echo "<div style='background:#d4edda; color:#155724; padding:15px; border-radius:8px; margin:10px 0;'>";
        echo "<strong>‚úÖ ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong><br><br>";
        echo "<strong>üìã ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:</strong><br>";
        echo "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô<br>";
        echo "‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢<br>";
        echo "‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô admin<br>";
        echo "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•<br><br>";
        echo "<strong>üîë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:</strong><br>";
        echo "Username: admin<br>";
        echo "Password: admin123<br><br>";
        echo "<strong>üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong><br>";
        echo "1. ‡∏£‡∏±‡∏ô <a href='create_sample_data.php'>create_sample_data.php</a> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á<br>";
        echo "2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö<br>";
        echo "3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤<br>";
        echo "</div>";
    } else {
        echo "<div style='background:#f8d7da; color:#721c24; padding:15px; border-radius:8px; margin:10px 0;'>";
        echo "<strong>‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</strong><br>";
        echo "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç";
        echo "</div>";
    }
    
    echo "</div>";
    
} catch (Exception $e) {
    echo "<h3>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°:</h3>";
    echo "<div style='background:#f8d7da; color:#721c24; padding:15px; border-radius:8px;'>";
    echo "Error: " . $e->getMessage() . "<br>";
    echo "File: " . $e->getFile() . "<br>";
    echo "Line: " . $e->getLine() . "<br>";
    echo "</div>";
}
?>