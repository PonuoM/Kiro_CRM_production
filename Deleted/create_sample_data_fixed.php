<?php
/**
 * Fixed Create Sample Data for CRM System
 * Creates comprehensive sample data with proper error handling
 */

require_once 'config/database.php';

try {
    $db = Database::getInstance();
    $pdo = $db->getConnection();
    
    echo "<h2>üè¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö CRM (Version 2.0)</h2>";
    
    // Enable foreign key checks
    $pdo->exec("SET FOREIGN_KEY_CHECKS = 0");
    
    // Step 1: Check table structure first
    echo "<h3>üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>";
    
    // Check users table structure
    try {
        $stmt = $pdo->query("DESCRIBE users");
        $userColumns = array_column($stmt->fetchAll(), 'Field');
        echo "<div style='background:#e7f3ff; padding:10px; margin:10px 0;'>";
        echo "<strong>‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:</strong> " . implode(', ', $userColumns) . "<br>";
        echo "</div>";
    } catch (Exception $e) {
        echo "<div style='background:#f8d7da; padding:10px; margin:10px 0;'>";
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users: " . $e->getMessage();
        echo "</div>";
        throw new Exception("Database structure check failed");
    }
    
    // Check customers table structure
    try {
        $stmt = $pdo->query("DESCRIBE customers");
        $customerColumns = array_column($stmt->fetchAll(), 'Field');
        echo "<div style='background:#e7f3ff; padding:10px; margin:10px 0;'>";
        echo "<strong>‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:</strong> " . implode(', ', array_slice($customerColumns, 0, 10)) . "... (‡∏£‡∏ß‡∏° " . count($customerColumns) . " ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)<br>";
        echo "</div>";
    } catch (Exception $e) {
        echo "<div style='background:#f8d7da; padding:10px; margin:10px 0;'>";
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers: " . $e->getMessage();
        echo "</div>";
        throw new Exception("Database structure check failed");
    }
    
    // Step 2: Clear existing sample data
    echo "<h3>üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤</h3>";
    
    try {
        $pdo->exec("DELETE FROM orders WHERE CustomerCode LIKE 'CUS%'");
        $pdo->exec("DELETE FROM call_logs WHERE CustomerCode LIKE 'CUS%'");
        $pdo->exec("DELETE FROM tasks WHERE CustomerCode LIKE 'CUS%'");
        $pdo->exec("DELETE FROM sales_histories WHERE CustomerCode LIKE 'CUS%'");
        $pdo->exec("DELETE FROM customers WHERE CustomerCode LIKE 'CUS%'");
        $pdo->exec("DELETE FROM users WHERE Username LIKE '%_alpha%' OR Username LIKE '%_beta%'");
        echo "‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢<br>";
    } catch (Exception $e) {
        echo "‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " . $e->getMessage() . "<br>";
    }
    
    // Step 3: Create Users (2 Supervisors + 6 Sales staff)
    echo "<h3>üë• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...</h3>";
    
    $users = [
        // Team Alpha - Supervisor
        [
            'username' => 'supervisor_alpha',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
            'last_name' => '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏µ',
            'email' => 'supervisor.alpha@company.com',
            'phone' => '081-111-1111',
            'role' => 'Supervisor',
            'status' => 1,
            'team' => 'Team Alpha'
        ],
        // Team Alpha - Sales Staff
        [
            'username' => 'sales_alpha1',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
            'last_name' => '‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Å‡πà‡∏á',
            'email' => 'sales.alpha1@company.com',
            'phone' => '081-111-1112',
            'role' => 'Sale',
            'status' => 1,
            'team' => 'Team Alpha'
        ],
        [
            'username' => 'sales_alpha2',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå',
            'last_name' => '‡∏û‡∏π‡∏î‡πÄ‡∏Å‡πà‡∏á',
            'email' => 'sales.alpha2@company.com',
            'phone' => '081-111-1113',
            'role' => 'Sale',
            'status' => 1,
            'team' => 'Team Alpha'
        ],
        [
            'username' => 'sales_alpha3',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏û‡∏£',
            'last_name' => '‡∏ä‡∏ô‡∏∞‡πÉ‡∏à',
            'email' => 'sales.alpha3@company.com',
            'phone' => '081-111-1114',
            'role' => 'Sale',
            'status' => 1,
            'team' => 'Team Alpha'
        ],
        // Team Beta - Supervisor
        [
            'username' => 'supervisor_beta',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏™‡∏∏‡∏Ç',
            'last_name' => '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏î‡∏µ',
            'email' => 'supervisor.beta@company.com',
            'phone' => '081-222-2221',
            'role' => 'Supervisor',
            'status' => 1,
            'team' => 'Team Beta'
        ],
        // Team Beta - Sales Staff
        [
            'username' => 'sales_beta1',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏õ‡∏≠‡∏á',
            'last_name' => '‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ',
            'email' => 'sales.beta1@company.com',
            'phone' => '081-222-2222',
            'role' => 'Sale',
            'status' => 1,
            'team' => 'Team Beta'
        ],
        [
            'username' => 'sales_beta2',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡πÉ‡∏à',
            'last_name' => '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ',
            'email' => 'sales.beta2@company.com',
            'phone' => '081-222-2223',
            'role' => 'Sale',
            'status' => 1,
            'team' => 'Team Beta'
        ],
        [
            'username' => 'sales_beta3',
            'password' => password_hash('123456', PASSWORD_DEFAULT),
            'first_name' => '‡∏™‡∏°‡∏Ñ‡∏¥‡∏î',
            'last_name' => '‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à',
            'email' => 'sales.beta3@company.com',
            'phone' => '081-222-2224',
            'role' => 'Sale',
            'status' => 1,
            'team' => 'Team Beta'
        ]
    ];
    
    // Insert users with proper error handling
    $userSql = "INSERT INTO users (Username, Password, FirstName, LastName, Email, Phone, Role, Status, CreatedDate, ModifiedDate, CreatedBy) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW(), 'system')
                ON DUPLICATE KEY UPDATE 
                FirstName = VALUES(FirstName), 
                LastName = VALUES(LastName),
                Email = VALUES(Email),
                Phone = VALUES(Phone),
                ModifiedDate = NOW()";
    
    $userStmt = $pdo->prepare($userSql);
    $userCount = 0;
    
    foreach ($users as $user) {
        try {
            $result = $userStmt->execute([
                $user['username'], 
                $user['password'], 
                $user['first_name'],
                $user['last_name'],
                $user['email'], 
                $user['phone'], 
                $user['role'], 
                $user['status']
            ]);
            
            if ($result) {
                $userCount++;
                echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {$user['first_name']} {$user['last_name']} ({$user['role']})<br>";
            }
        } catch (PDOException $e) {
            echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {$user['username']}: " . $e->getMessage() . "<br>";
            echo "<div style='background:#fff3cd; padding:10px; margin:5px 0;'>";
            echo "Debug info: SQL State: " . $e->getCode() . "<br>";
            echo "</div>";
        }
    }
    
    echo "<div style='background:#d4edda; padding:10px; margin:10px 0;'>";
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {$userCount}/" . count($users) . " ‡∏Ñ‡∏ô<br>";
    echo "</div>";
    
    // Step 4: Create Customers with different grades and temperatures
    echo "<h3>üè™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...</h3>";
    
    $customers = [
        // High-value customers (Grade A)
        [
            'code' => 'CUS' . date('Ymd') . '001',
            'name' => '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏≠‡∏ö‡∏µ‡∏ã‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)',
            'tel' => '02-111-1111',
            'email' => 'contact@abc-corp.com',
            'address' => '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏µ‡∏•‡∏° ‡πÅ‡∏Ç‡∏ß‡∏á‡∏™‡∏µ‡∏•‡∏° ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10500',
            'status' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤',
            'grade' => 'A',
            'temperature' => 'WARM',
            'total_purchase' => '15,000',
            'sales' => 'sales_alpha1'
        ],
        [
            'code' => 'CUS' . date('Ymd') . '002',
            'name' => '‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏î‡∏≠‡∏∞‡∏°‡∏≠‡∏•‡∏•‡πå',
            'tel' => '02-222-2222',
            'email' => 'purchase@themall.co.th',
            'address' => '456 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡πÅ‡∏Ç‡∏ß‡∏á‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á ‡πÄ‡∏Ç‡∏ï‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10400',
            'status' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°',
            'grade' => 'A',
            'temperature' => 'HOT',
            'total_purchase' => '22,500',
            'sales' => 'sales_alpha2'
        ],
        [
            'code' => 'CUS' . date('Ymd') . '003',
            'name' => '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ‡πÅ‡∏Å‡∏£‡∏ô‡∏î‡πå‡πÑ‡∏Æ‡πÅ‡∏≠‡∏ó',
            'tel' => '02-333-3333',
            'email' => 'procurement@grandhyatt.com',
            'address' => '789 ‡∏ñ‡∏ô‡∏ô‡∏õ‡∏•‡∏∑‡πâ‡∏°‡∏à‡∏¥‡∏ï ‡πÅ‡∏Ç‡∏ß‡∏á‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ ‡πÄ‡∏Ç‡∏ï‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10330',
            'status' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤',
            'grade' => 'A',
            'temperature' => 'COLD',
            'total_purchase' => '18,750',
            'sales' => 'sales_beta1'
        ],
        // Medium-value customers (Grade B)
        [
            'code' => 'CUS' . date('Ymd') . '004',
            'name' => '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏™‡∏ß‡∏ô‡∏ú‡∏∂‡πâ‡∏á',
            'tel' => '02-444-4444',
            'email' => 'order@suanpung.com',
            'address' => '111 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10110',
            'status' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
            'grade' => 'B',
            'temperature' => 'HOT',
            'total_purchase' => '8,500',
            'sales' => 'sales_alpha3'
        ],
        [
            'code' => 'CUS' . date('Ymd') . '005',
            'name' => '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà ‡∏≠‡πÄ‡∏°‡∏ã‡∏≠‡∏ô',
            'tel' => '02-555-5555',
            'email' => 'info@amazon-cafe.com',
            'address' => '222 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 4 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏ß‡∏á‡∏®‡πå ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10500',
            'status' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°',
            'grade' => 'B',
            'temperature' => 'WARM',
            'total_purchase' => '6,200',
            'sales' => 'sales_beta2'
        ],
        // Lower-value customers (Grade C & D)
        [
            'code' => 'CUS' . date('Ymd') . '006',
            'name' => '‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß ‡∏•‡∏∏‡∏á‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£',
            'tel' => '081-777-7777',
            'email' => 'noodle@uncle.com',
            'address' => '44 ‡∏ã‡∏≠‡∏¢‡∏£‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏´‡∏á 12 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏°‡∏≤‡∏Å ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡∏õ‡∏¥ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10240',
            'status' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
            'grade' => 'C',
            'temperature' => 'HOT',
            'total_purchase' => '3,200',
            'sales' => 'sales_alpha1'
        ]
    ];
    
    // Dynamic customer SQL based on available columns
    $customerBasicColumns = ['CustomerCode', 'CustomerName', 'CustomerTel', 'CustomerAddress', 'CustomerStatus', 'Sales', 'CreatedDate', 'ModifiedDate'];
    $customerExtendedColumns = ['CustomerEmail', 'CustomerGrade', 'CustomerTemperature', 'TotalPurchase'];
    
    // Check which columns exist
    $availableExtendedColumns = array_intersect($customerExtendedColumns, $customerColumns);
    $allCustomerColumns = array_merge($customerBasicColumns, $availableExtendedColumns);
    
    $customerColumnsSql = implode(', ', $allCustomerColumns);
    $customerPlaceholders = implode(', ', array_fill(0, count($allCustomerColumns), '?'));
    
    $customerSql = "INSERT INTO customers ($customerColumnsSql) 
                    VALUES ($customerPlaceholders)
                    ON DUPLICATE KEY UPDATE 
                    CustomerName = VALUES(CustomerName),
                    ModifiedDate = NOW()";
    
    echo "<div style='background:#e7f3ff; padding:10px; margin:10px 0;'>";
    echo "<strong>üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:</strong> " . implode(', ', $allCustomerColumns) . "<br>";
    echo "</div>";
    
    $customerStmt = $pdo->prepare($customerSql);
    $customerCount = 0;
    
    foreach ($customers as $customer) {
        try {
            $values = [
                $customer['code'],
                $customer['name'],
                $customer['tel'],
                $customer['address'],
                $customer['status'],
                $customer['sales'],
                date('Y-m-d H:i:s'), // CreatedDate
                date('Y-m-d H:i:s')  // ModifiedDate
            ];
            
            // Add extended column values if they exist
            if (in_array('CustomerEmail', $availableExtendedColumns)) {
                $values[] = $customer['email'];
            }
            if (in_array('CustomerGrade', $availableExtendedColumns)) {
                $values[] = $customer['grade'];
            }
            if (in_array('CustomerTemperature', $availableExtendedColumns)) {
                $values[] = $customer['temperature'];
            }
            if (in_array('TotalPurchase', $availableExtendedColumns)) {
                $values[] = $customer['total_purchase'];
            }
            
            $result = $customerStmt->execute($values);
            
            if ($result) {
                $customerCount++;
                echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {$customer['name']} ";
                if (isset($customer['grade'])) echo "(Grade {$customer['grade']}) ";
                echo "-> {$customer['sales']}<br>";
            }
        } catch (PDOException $e) {
            echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {$customer['name']}: " . $e->getMessage() . "<br>";
        }
    }
    
    echo "<div style='background:#d4edda; padding:10px; margin:10px 0;'>";
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {$customerCount}/" . count($customers) . " ‡∏£‡∏≤‡∏¢<br>";
    echo "</div>";
    
    // Step 5: Create sample orders (only if orders table exists)
    $checkOrderTable = "SHOW TABLES LIKE 'orders'";
    $result = $pdo->query($checkOrderTable);
    
    if ($result->rowCount() > 0) {
        echo "<h3>üõí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...</h3>";
        
        $orders = [
            [
                'code' => 'ORD' . date('Ymd') . '001',
                'customer_code' => 'CUS' . date('Ymd') . '001',
                'document_no' => 'INV-001',
                'product_name' => '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Premium Package',
                'quantity' => 1,
                'total_amount' => '15,000',
                'payment_method' => '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
                'created_by' => 'sales_alpha1'
            ],
            [
                'code' => 'ORD' . date('Ymd') . '002',
                'customer_code' => 'CUS' . date('Ymd') . '002',
                'document_no' => 'INV-002',
                'product_name' => '‡∏£‡∏∞‡∏ö‡∏ö POS ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á',
                'quantity' => 1,
                'total_amount' => '22,500',
                'payment_method' => '‡πÄ‡∏ä‡πá‡∏Ñ',
                'created_by' => 'sales_alpha2'
            ]
        ];
        
        $orderSql = "INSERT INTO orders (OrderCode, CustomerCode, DocumentNo, OrderDate, ProductName, Quantity, TotalAmount, PaymentMethod, CreatedBy, CreatedDate) 
                     VALUES (?, ?, ?, NOW(), ?, ?, ?, ?, ?, NOW())
                     ON DUPLICATE KEY UPDATE 
                     ProductName = VALUES(ProductName),
                     TotalAmount = VALUES(TotalAmount)";
        
        $orderStmt = $pdo->prepare($orderSql);
        $orderCount = 0;
        
        foreach ($orders as $order) {
            try {
                $result = $orderStmt->execute([
                    $order['code'], 
                    $order['customer_code'], 
                    $order['document_no'],
                    $order['product_name'], 
                    $order['quantity'], 
                    $order['total_amount'],
                    $order['payment_method'], 
                    $order['created_by']
                ]);
                
                if ($result) {
                    $orderCount++;
                    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {$order['document_no']} - {$order['product_name']} (‡∏ø{$order['total_amount']})<br>";
                }
            } catch (PDOException $e) {
                echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {$order['document_no']}: " . $e->getMessage() . "<br>";
            }
        }
        
        echo "<div style='background:#d4edda; padding:10px; margin:10px 0;'>";
        echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {$orderCount}/" . count($orders) . " ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
        echo "</div>";
    } else {
        echo "<h3>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>";
    }
    
    // Final summary
    echo "<h3>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</h3>";
    echo "<div style='background:#f0f8ff; padding:15px; border-radius:8px; margin:10px 0;'>";
    echo "<strong>‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</strong><br><br>";
    echo "<strong>üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</strong> {$userCount} ‡∏Ñ‡∏ô<br>";
    echo "<strong>üè™ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> {$customerCount} ‡∏£‡∏≤‡∏¢<br>";
    if (isset($orderCount)) echo "<strong>üõí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</strong> {$orderCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>";
    echo "<br><strong>üîë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:</strong><br>";
    echo "Username / Password: 123456 (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å user)<br><br>";
    echo "<strong>Supervisors:</strong> supervisor_alpha, supervisor_beta<br>";
    echo "<strong>Sales Teams:</strong> sales_alpha1, sales_alpha2, sales_alpha3, sales_beta1, sales_beta2, sales_beta3<br>";
    echo "</div>";
    
    echo "<h2>üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!</h2>";
    echo "<p><strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:</strong> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</p>";
    
    // Re-enable foreign key checks
    $pdo->exec("SET FOREIGN_KEY_CHECKS = 1");
    
} catch(Exception $e) {
    echo "<h3>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</h3>";
    echo "<div style='background:#f8d7da; color:#721c24; padding:15px; border-radius:8px;'>";
    echo "Error: " . $e->getMessage() . "<br>";
    echo "File: " . $e->getFile() . "<br>";
    echo "Line: " . $e->getLine() . "<br>";
    echo "</div>";
    
    echo "<h4>üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</h4>";
    echo "<ol>";
    echo "<li>‡∏£‡∏±‡∏ô <a href='complete_database_repair.php'>complete_database_repair.php</a> ‡∏Å‡πà‡∏≠‡∏ô</li>";
    echo "<li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô config/database.php</li>";
    echo "<li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>";
    echo "</ol>";
}
?>