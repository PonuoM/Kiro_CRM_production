<?php
/**
 * Create Customer Activity Log Table
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏ß‡∏ô‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ
 */

error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<!DOCTYPE html>\n<html><head><meta charset='UTF-8'><title>üìã Create Customer Activity Log</title>";
echo "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet'>";
echo "<style>body{font-family:Arial,sans-serif;padding:15px;} .section{margin:15px 0;padding:15px;border:2px solid #ddd;border-radius:8px;background:white;}</style>";
echo "</head><body>";

echo "<h1>üìã Create Customer Activity Log Table</h1>";
echo "<p>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏ß‡∏ô‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ</p>";

try {
    require_once 'config/database.php';
    $db = Database::getInstance();
    $pdo = $db->getConnection();
    
    echo "<div class='section'>";
    echo "<h3>üóÑÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Table: customer_activity_log</h3>";
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer_activity_log (‡πÑ‡∏°‡πà‡∏°‡∏µ Foreign Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
    $createTableSQL = "
        CREATE TABLE IF NOT EXISTS customer_activity_log (
            id INT AUTO_INCREMENT PRIMARY KEY,
            customer_code VARCHAR(20) NOT NULL,
            customer_name VARCHAR(200) NOT NULL,
            activity_type ENUM(
                'CART_STATUS_CHANGE',
                'CUSTOMER_STATUS_CHANGE', 
                'SALES_ASSIGNMENT',
                'SALES_REMOVAL',
                'TEMPERATURE_CHANGE',
                'GRADE_CHANGE',
                'AUTO_RETRIEVAL',
                'MANUAL_MOVE',
                'SYSTEM_UPDATE'
            ) NOT NULL,
            field_changed VARCHAR(50) NOT NULL,
            old_value VARCHAR(200),
            new_value VARCHAR(200),
            changed_from VARCHAR(100) COMMENT '‡∏à‡∏≤‡∏Å (‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏´‡∏ô, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏´‡∏ô)',
            changed_to VARCHAR(100) COMMENT '‡πÑ‡∏õ (‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏´‡∏ô, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏´‡∏ô)',
            reason VARCHAR(200) COMMENT '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
            changed_by VARCHAR(100) NOT NULL COMMENT '‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (user, auto_rules, system)',
            automation_rule VARCHAR(100) COMMENT '‡∏Å‡∏é‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô',
            ip_address VARCHAR(45),
            user_agent TEXT,
            additional_data JSON COMMENT '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_customer_code (customer_code),
            INDEX idx_activity_type (activity_type),
            INDEX idx_created_at (created_at),
            INDEX idx_changed_by (changed_by)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        COMMENT='‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏ß‡∏ô‡∏™‡∏≠‡∏ö - ‡πÑ‡∏°‡πà‡∏°‡∏µ Foreign Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô'
    ";
    
    $pdo->exec($createTableSQL);
    
    echo "<div class='alert alert-success'>";
    echo "<h4>‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer_activity_log ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>";
    echo "</div>";
    
    // ‡πÅ‡∏™‡∏î‡∏á Structure
    echo "<h4>üìã Structure ‡∏Ç‡∏≠‡∏á customer_activity_log:</h4>";
    
    $columns = $pdo->query("SHOW COLUMNS FROM customer_activity_log")->fetchAll(PDO::FETCH_ASSOC);
    
    echo "<table class='table table-sm table-bordered'>";
    echo "<thead><tr><th>Column</th><th>Type</th><th>Null</th><th>Key</th><th>Comment</th></tr></thead>";
    echo "<tbody>";
    
    foreach ($columns as $col) {
        echo "<tr>";
        echo "<td><strong>{$col['Field']}</strong></td>";
        echo "<td>{$col['Type']}</td>";
        echo "<td>{$col['Null']}</td>";
        echo "<td>{$col['Key']}</td>";
        echo "<td><small>" . ($col['Comment'] ?? '-') . "</small></td>";
        echo "</tr>";
    }
    
    echo "</tbody></table>";
    
    echo "</div>";
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Helper Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
    echo "<div class='section'>";
    echo "<h3>üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á CustomerActivityLogger Class</h3>";
    
    $loggerClass = '<?php
/**
 * Customer Activity Logger
 * Helper class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */

class CustomerActivityLogger {
    private $pdo;
    
    public function __construct($pdo = null) {
        if ($pdo) {
            $this->pdo = $pdo;
        } else {
            require_once __DIR__ . \'/config/database.php\';
            $db = Database::getInstance();
            $this->pdo = $db->getConnection();
        }
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á CartStatus
     */
    public function logCartStatusChange($customerCode, $customerName, $oldStatus, $newStatus, $changedBy, $reason = null, $automationRule = null) {
        return $this->log([
            \'customer_code\' => $customerCode,
            \'customer_name\' => $customerName,
            \'activity_type\' => \'CART_STATUS_CHANGE\',
            \'field_changed\' => \'CartStatus\',
            \'old_value\' => $oldStatus,
            \'new_value\' => $newStatus,
            \'changed_from\' => $oldStatus,
            \'changed_to\' => $newStatus,
            \'reason\' => $reason ?? "Cart status changed from $oldStatus to $newStatus",
            \'changed_by\' => $changedBy,
            \'automation_rule\' => $automationRule
        ]);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Sales Assignment
     */
    public function logSalesAssignment($customerCode, $customerName, $oldSales, $newSales, $changedBy, $reason = null) {
        $activityType = $newSales ? \'SALES_ASSIGNMENT\' : \'SALES_REMOVAL\';
        
        return $this->log([
            \'customer_code\' => $customerCode,
            \'customer_name\' => $customerName,
            \'activity_type\' => $activityType,
            \'field_changed\' => \'Sales\',
            \'old_value\' => $oldSales,
            \'new_value\' => $newSales,
            \'changed_from\' => $oldSales ? "Sales: $oldSales" : "No Sales",
            \'changed_to\' => $newSales ? "Sales: $newSales" : "No Sales",
            \'reason\' => $reason ?? ($newSales ? "Assigned to $newSales" : "Removed from assignment"),
            \'changed_by\' => $changedBy
        ]);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Customer Status
     */
    public function logCustomerStatusChange($customerCode, $customerName, $oldStatus, $newStatus, $changedBy, $reason = null) {
        return $this->log([
            \'customer_code\' => $customerCode,
            \'customer_name\' => $customerName,
            \'activity_type\' => \'CUSTOMER_STATUS_CHANGE\',
            \'field_changed\' => \'CustomerStatus\',
            \'old_value\' => $oldStatus,
            \'new_value\' => $newStatus,
            \'changed_from\' => $oldStatus,
            \'changed_to\' => $newStatus,
            \'reason\' => $reason ?? "Customer status changed from $oldStatus to $newStatus",
            \'changed_by\' => $changedBy
        ]);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Temperature
     */
    public function logTemperatureChange($customerCode, $customerName, $oldTemp, $newTemp, $changedBy, $reason = null) {
        return $this->log([
            \'customer_code\' => $customerCode,
            \'customer_name\' => $customerName,
            \'activity_type\' => \'TEMPERATURE_CHANGE\',
            \'field_changed\' => \'CustomerTemperature\',
            \'old_value\' => $oldTemp,
            \'new_value\' => $newTemp,
            \'changed_from\' => $oldTemp ?? \'No Temperature\',
            \'changed_to\' => $newTemp,
            \'reason\' => $reason ?? "Temperature changed from $oldTemp to $newTemp",
            \'changed_by\' => $changedBy
        ]);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Grade
     */
    public function logGradeChange($customerCode, $customerName, $oldGrade, $newGrade, $changedBy, $reason = null) {
        return $this->log([
            \'customer_code\' => $customerCode,
            \'customer_name\' => $customerName,
            \'activity_type\' => \'GRADE_CHANGE\',
            \'field_changed\' => \'CustomerGrade\',
            \'old_value\' => $oldGrade,
            \'new_value\' => $newGrade,
            \'changed_from\' => $oldGrade ?? \'No Grade\',
            \'changed_to\' => $newGrade,
            \'reason\' => $reason ?? "Grade changed from $oldGrade to $newGrade",
            \'changed_by\' => $changedBy
        ]);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log Auto Retrieval (‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
     */
    public function logAutoRetrieval($customerCode, $customerName, $fromStatus, $toStatus, $automationRule, $reason) {
        return $this->log([
            \'customer_code\' => $customerCode,
            \'customer_name\' => $customerName,
            \'activity_type\' => \'AUTO_RETRIEVAL\',
            \'field_changed\' => \'CartStatus\',
            \'old_value\' => $fromStatus,
            \'new_value\' => $toStatus,
            \'changed_from\' => $fromStatus,
            \'changed_to\' => $toStatus,
            \'reason\' => $reason,
            \'changed_by\' => \'auto_rules_system\',
            \'automation_rule\' => $automationRule
        ]);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏´‡∏•‡∏±‡∏Å
     */
    private function log($data) {
        try {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÅ‡∏•‡∏∞ User Agent
            $data[\'ip_address\'] = $_SERVER[\'REMOTE_ADDR\'] ?? $_SERVER[\'SERVER_ADDR\'] ?? \'CLI\';
            $data[\'user_agent\'] = $_SERVER[\'HTTP_USER_AGENT\'] ?? \'Auto Rules System\';
            
            $sql = "
                INSERT INTO customer_activity_log (
                    customer_code, customer_name, activity_type, field_changed,
                    old_value, new_value, changed_from, changed_to, reason,
                    changed_by, automation_rule, ip_address, user_agent, additional_data
                ) VALUES (
                    :customer_code, :customer_name, :activity_type, :field_changed,
                    :old_value, :new_value, :changed_from, :changed_to, :reason,
                    :changed_by, :automation_rule, :ip_address, :user_agent, :additional_data
                )
            ";
            
            $stmt = $this->pdo->prepare($sql);
            
            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° additional_data
            $additionalData = [];
            if (isset($data[\'additional_data\'])) {
                $additionalData = $data[\'additional_data\'];
            }
            $data[\'additional_data\'] = json_encode($additionalData);
            
            return $stmt->execute($data);
            
        } catch (Exception $e) {
            error_log("CustomerActivityLogger Error: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * ‡∏î‡∏∂‡∏á Activity Log ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
     */
    public function getCustomerActivity($customerCode, $limit = 50) {
        $sql = "
            SELECT * FROM customer_activity_log 
            WHERE customer_code = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        ";
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute([$customerCode, $limit]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    /**
     * ‡∏î‡∏∂‡∏á Activity Log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    public function getAllActivity($limit = 100, $activityType = null) {
        $sql = "SELECT * FROM customer_activity_log";
        $params = [];
        
        if ($activityType) {
            $sql .= " WHERE activity_type = ?";
            $params[] = $activityType;
        }
        
        $sql .= " ORDER BY created_at DESC LIMIT ?";
        $params[] = $limit;
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($params);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}
?>';
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Logger Class
    file_put_contents(__DIR__ . '/includes/CustomerActivityLogger.php', $loggerClass);
    
    echo "<div class='alert alert-success'>";
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á CustomerActivityLogger Class ‡∏ó‡∏µ‡πà <code>includes/CustomerActivityLogger.php</code>";
    echo "</div>";
    
    echo "</div>";
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    echo "<div class='section'>";
    echo "<h3>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Customer Activity Log</h3>";
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Logger
    include_once __DIR__ . '/includes/CustomerActivityLogger.php';
    $logger = new CustomerActivityLogger($pdo);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
    $testResult1 = $logger->logCartStatusChange(
        'TEST999', 
        '‡∏ó‡∏î‡∏™‡∏≠‡∏ö Activity Log', 
        '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•', 
        '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏£‡∏≠', 
        'system_test', 
        '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Activity Log',
        'test_rule'
    );
    
    $testResult2 = $logger->logSalesAssignment(
        'TEST999',
        '‡∏ó‡∏î‡∏™‡∏≠‡∏ö Activity Log',
        'sales01',
        null,
        'auto_rules_test',
        '‡∏•‡∏ö Sales ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏£‡∏≠'
    );
    
    if ($testResult1 && $testResult2) {
        echo "<div class='alert alert-success'>";
        echo "<h4>‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h4>";
        echo "<p>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Test Activity Log 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</p>";
        echo "</div>";
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        $testLogs = $logger->getCustomerActivity('TEST999');
        
        echo "<h5>üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</h5>";
        echo "<table class='table table-sm table-bordered'>";
        echo "<thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>Activity</th><th>Field</th><th>‡∏à‡∏≤‡∏Å</th><th>‡πÑ‡∏õ</th><th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</th><th>‡πÇ‡∏î‡∏¢</th></tr></thead>";
        echo "<tbody>";
        
        foreach ($testLogs as $log) {
            echo "<tr>";
            echo "<td>" . date('d/m H:i:s', strtotime($log['created_at'])) . "</td>";
            echo "<td><span class='badge bg-primary'>{$log['activity_type']}</span></td>";
            echo "<td>{$log['field_changed']}</td>";
            echo "<td>{$log['old_value']}</td>";
            echo "<td><strong>{$log['new_value']}</strong></td>";
            echo "<td><small>{$log['reason']}</small></td>";
            echo "<td>{$log['changed_by']}</td>";
            echo "</tr>";
        }
        
        echo "</tbody></table>";
        
    } else {
        echo "<div class='alert alert-warning'>‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤</div>";
    }
    
    echo "</div>";
    
    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    echo "<div class='section'>";
    echo "<h3>üìñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>";
    
    echo "<div class='alert alert-info'>";
    echo "<h4>üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CustomerActivityLogger:</h4>";
    echo "<pre style='background:#f8f9fa;padding:10px;border-radius:5px;'>";
    echo htmlspecialchars('
// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Logger
require_once "includes/CustomerActivityLogger.php";
$logger = new CustomerActivityLogger();

// 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Cart Status Change
$logger->logCartStatusChange(
    "CUST001", "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö", 
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•", "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏£‡∏≠", 
    "auto_rules_system", 
    "‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ 90 ‡∏ß‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ Orders", 
    "existing_customer_time_rule"
);

// 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Sales Assignment/Removal
$logger->logSalesAssignment(
    "CUST001", "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
    "sales01", null,
    "auto_rules_system",
    "‡∏•‡∏ö Sales ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏£‡∏≠"
);

// 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Activity ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
$activities = $logger->getCustomerActivity("CUST001");

// 5. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Activity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
$allActivities = $logger->getAllActivity(100, "CART_STATUS_CHANGE");
');
    echo "</pre>";
    echo "</div>";
    
    echo "<div class='alert alert-warning'>";
    echo "<h4>‚ö†Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:</h4>";
    echo "<ol>";
    echo "<li><strong>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Auto Rules:</strong> ‡πÄ‡∏û‡∏¥‡πà‡∏° CustomerActivityLogger ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ</li>";
    echo "<li><strong>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Frontend:</strong> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</li>";
    echo "<li><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á Activity Viewer:</strong> ‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π Activity Log ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</li>";
    echo "<li><strong>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Log ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</li>";
    echo "</ol>";
    echo "</div>";
    
    echo "</div>";
    
} catch (Exception $e) {
    echo "<div class='alert alert-danger'>";
    echo "<strong>‚ùå Error:</strong> " . $e->getMessage();
    echo "</div>";
}

echo "</body></html>";
?>